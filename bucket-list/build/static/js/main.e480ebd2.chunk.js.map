{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","useState","input","setInput","eagerness","setEagerness","eagernessLevel","handleSubmit","e","preventDefault","onSubmit","id","Math","random","floor","text","handleChange","target","value","edit","className","type","placeholder","name","onChange","onClick","Bucket","setEdit","console","log","bucket","submitUpdate","map","item","index","completed","completeBucketItem","removeBucketItem","BucketList","setBucket","newBuckets","slice","push","updatedBucket","filteredBucket","filter","editBucketItem","itemId","newValue","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAsFeA,MApFf,SAAoBC,GAClB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAKG,EAAL,KAAgBC,EAAhB,KAGMC,EAAiB,CAAC,OAAQ,SAAU,OAEpCC,EAAe,SAACC,GACpBA,EAAEC,iBAEGL,IACHA,EAAY,OAGdJ,EAAMU,SAAS,CACbC,GAAIC,KAAKC,OAAsB,IAAfD,KAAKE,SACrBC,KAAMb,EACNE,UAAWA,IAGbD,EAAS,IACTE,EAAa,KAGTW,EAAe,SAACR,GACpBL,EAASK,EAAES,OAAOC,QAKpB,OAAQlB,EAAMmB,KA0BZ,gCACE,gDAAmBnB,EAAMmB,KAAKD,SAC9B,uBAAME,UAAU,cAAcV,SAAUH,EAAxC,UACE,uBACEc,KAAK,OACLC,YAAatB,EAAMmB,KAAKD,MACxBA,MAAOhB,EACPqB,KAAK,OACLH,UAAU,eACVI,SAAUR,IAEZ,sBAAKI,UAAU,WAAf,UACE,wBAAQA,UAAS,kBAAahB,GAA9B,SACGA,GAAa,aAEhB,sBAAKgB,UAAU,mBAAf,UAEE,mBAAGK,QAASpB,EAAaC,EAAe,IAAxC,qBACA,mBAAGmB,QAASpB,EAAaC,EAAe,IAAxC,wBACA,mBAAGmB,QAASpB,EAAaC,EAAe,IAAxC,uCAGJ,wBAAQc,UAAU,gBAAlB,0BA/CJ,8BACE,uBAAMA,UAAU,cAAcV,SAAUH,EAAxC,UACE,uBACEc,KAAK,OACLC,YAAY,0BACZJ,MAAOhB,EACPqB,KAAK,OACLH,UAAU,eACVI,SAAUR,IAEZ,sBAAKI,UAAU,WAAf,UACE,wBAAQA,UAAS,kBAAahB,GAA9B,SACGA,GAAa,aAEhB,sBAAKgB,UAAU,mBAAf,UAEE,mBAAGK,QAASpB,EAAaC,EAAe,IAAxC,qBACA,mBAAGmB,QAASpB,EAAaC,EAAe,IAAxC,wBACA,mBAAGmB,QAASpB,EAAaC,EAAe,IAAxC,uCAGJ,wBAAQc,UAAU,gBAAlB,wCCROM,MA3Cf,SAAgB1B,GACd,MAAwBC,mBAAS,CAC/BU,GAAI,KACJO,MAAO,GACPd,UAAW,KAHb,mBAAOe,EAAP,KAAaQ,EAAb,KAMAC,QAAQC,IAAI7B,EAAM8B,QAElB,IAAMC,EAAe,SAACb,GAGpBS,EAAQ,CAACT,WAMX,OAAIC,EAAKR,GACA,cAAC,EAAD,CAAYQ,KAAMA,EAAMT,SAAUqB,IAGpC/B,EAAM8B,OAAOE,KAAI,SAACC,EAAMC,GAAP,OAItB,cAHA,CAGA,OAAKd,UAAWa,EAAKE,UAAL,8BAAwCF,EAAK7B,WAA7C,qBAAyE6B,EAAK7B,WAA9F,UAGE,qBAAiBqB,QAAS,kBAAMzB,EAAMoC,mBAAmBH,EAAKtB,KAA9D,SAEKsB,EAAKf,OAFAgB,GAIV,sBAAKd,UAAU,QAAf,UAEE,mBAAGK,QAAS,kBAAMM,EAAaE,EAAKf,QAApC,2BAEA,mBAAGO,QAAS,kBAAMzB,EAAMqC,iBAAiBJ,EAAKtB,KAA9C,sCAX4GuB,OC0CrGI,MAnEf,WACE,MAA4BrC,mBAAS,IAArC,mBAAO6B,EAAP,KAAeS,EAAf,KAoDA,OACE,gCACE,8DACA,cAAC,EAAD,CAAY7B,SApDM,SAACuB,GAGrB,IAAMO,EAAaV,EAAOW,QAC1BD,EAAWE,KAAKT,GAChBM,EAAUC,MAgDR,cAAC,EAAD,CACEV,OAAQA,EACRM,mBA9CqB,SAACzB,GAE1B,IAAIgC,EAAgBb,EAAOE,KAAI,SAACC,GAO9B,OAJGtB,IAAOsB,EAAKtB,KAEbsB,EAAKE,WAAY,GAEZF,KAGTM,EAAUI,IAmCNN,iBA/BmB,SAAC1B,GAExB,IAAMiC,EAAiBd,EAAOe,QAAO,SAACZ,GACpC,OAAOtB,IAAOsB,EAAKtB,MAIrB4B,EAAUK,IAyBNE,eArBiB,SAACC,EAAQC,GAEzBA,EAASjC,MAMdwB,GAAU,SAACU,GAAD,OACRA,EAAKjB,KAAI,SAACC,GAAD,OAAWA,EAAKtB,KAAOoC,EAASC,EAAWf,eC1C3CiB,MARf,WACE,OACE,qBAAK9B,UAAU,aAAf,SACE,cAAC,EAAD,OCFN+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e480ebd2.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction BucketForm(props) {\n  const [input, setInput] = useState('');\n  let [eagerness, setEagerness] = useState('');\n\n  // TODO: Use this array in the return statement below\n  const eagernessLevel = ['high', 'medium', 'low']\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!eagerness) {\n      eagerness = 'low';\n    }\n\n    props.onSubmit({\n      id: Math.random(Math.floor() * 1000),\n      text: input,\n      eagerness: eagerness,\n    });\n\n    setInput('');\n    setEagerness('');\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit ? (\n    <div>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add to your bucket list\"\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Add bucket list item</button>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BucketForm;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\n\nfunction Bucket(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: '',\n    eagerness: '',\n  });\n\n  console.log(props.bucket);\n\n  const submitUpdate = (value) => {\n\n    // TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\n    setEdit({value});\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings\n\n  };\n\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\n  if (edit.id) {\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return props.bucket.map((item, index) => (\n    // TODO: Add a className of `bucket row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\n    // TODO: Add a key attribute set to the value of the index position\n    // Hint: use a ternary operator\n    <div className={item.completed ? `bucket row complete ${item.eagerness}` : `bucket-row ${item.eagerness}`} key={index}>\n\n      {/* TODO: Add an onClick event that invokes the `completeBucketItem` method passing the item id as a argument*/}\n      <div key={index} onClick={() => props.completeBucketItem(item.id)}>\n          {/* TODO: Add the item text here */}\n          {item.value}\n      </div>\n      <div className=\"icons\">\n        {/* TODO: Add an onClick event update the `edit` object with the `id`, `value`, and `eagerness` properties*/}\n        <p onClick={() => submitUpdate(item.value)}> ‚úèÔ∏è</p>\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\n        <p onClick={() => props.removeBucketItem(item.id)}> üóëÔ∏è</p>\n      </div>\n    </div>\n  ));\n}\n\nexport default Bucket;\n","import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n    const newBuckets = bucket.slice(); // Copies array\n    newBuckets.push(item);\n    setBucket(newBuckets); // Passes whole new array as new value\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      \n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n      if(id === item.id)\n      {\n        item.completed = true; // TODO Make sure this isn't provided somewehere else\n      }\n      return item;\n    });\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n    const filteredBucket = bucket.filter((item) => {\n      return id !== item.id;\n    })\n\n    // TODO: Update the bucket state variable\n    setBucket(filteredBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","import './App.css';\nimport BucketList from './components/BucketList';\n\nfunction App() {\n  return (\n    <div className=\"bucket-app\">\n      <BucketList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}